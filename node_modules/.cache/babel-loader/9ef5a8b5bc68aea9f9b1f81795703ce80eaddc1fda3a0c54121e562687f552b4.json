{"ast":null,"code":"import React,{useState,createContext,useContext,useEffect}from'react';// Define the type for the context value\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the UserContext\nconst UserContext=/*#__PURE__*/createContext(undefined);// UserProvider component that wraps your application and provides the context\nexport const UserProvider=_ref=>{let{children}=_ref;const[username,setUsername]=useState(null);useEffect(()=>{if(username){localStorage.setItem('username',username);}else{// localStorage.removeItem('username'); // Optionally remove username from localStorage on logout\n}},[username]);return/*#__PURE__*/_jsx(UserContext.Provider,{value:{username,setUsername},children:children});};// Custom hook to use the UserContext\nexport const useUser=()=>{const context=useContext(UserContext);if(!context){throw new Error('useUser must be used within a UserProvider');}return context;};","map":{"version":3,"names":["React","useState","createContext","useContext","useEffect","jsx","_jsx","UserContext","undefined","UserProvider","_ref","children","username","setUsername","localStorage","setItem","Provider","value","useUser","context","Error"],"sources":["/Users/shakilase/Documents/shakila files/Todo-Task/src/Components/UserContext.tsx"],"sourcesContent":["import React, { useState, createContext, useContext, ReactNode,useEffect } from 'react';\n\n// Define the type for the context value\ninterface UserContextType {\n    username: string | null;\n    setUsername: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\n// Create the UserContext\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\n// UserProvider component that wraps your application and provides the context\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n    const [username, setUsername] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (username) {\n            localStorage.setItem('username', username);\n        } else {\n            // localStorage.removeItem('username'); // Optionally remove username from localStorage on logout\n        }\n    }, [username]);\n\n    return (\n        <UserContext.Provider value={{ username, setUsername }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\n// Custom hook to use the UserContext\nexport const useUser = () => {\n    const context = useContext(UserContext);\n    if (!context) {\n        throw new Error('useUser must be used within a UserProvider');\n    }\n    return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,aAAa,CAAEC,UAAU,CAAYC,SAAS,KAAQ,OAAO,CAEvF;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAMA;AACA,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAA8BM,SAAS,CAAC,CAEzE;AACA,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAC9D,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAgB,IAAI,CAAC,CAE7DG,SAAS,CAAC,IAAM,CACZ,GAAIQ,QAAQ,CAAE,CACVE,YAAY,CAACC,OAAO,CAAC,UAAU,CAAEH,QAAQ,CAAC,CAC9C,CAAC,IAAM,CACH;AAAA,CAER,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd,mBACIN,IAAA,CAACC,WAAW,CAACS,QAAQ,EAACC,KAAK,CAAE,CAAEL,QAAQ,CAAEC,WAAY,CAAE,CAAAF,QAAA,CAClDA,QAAQ,CACS,CAAC,CAE/B,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,OAAO,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,OAAO,CAAGhB,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACY,OAAO,CAAE,CACV,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}